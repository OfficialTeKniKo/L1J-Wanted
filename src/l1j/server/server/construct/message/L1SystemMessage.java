package l1j.server.server.construct.message;

import l1j.server.server.serverpackets.message.S_SystemMessage;

public class L1SystemMessage {
//AUTO SRM: 	public static final S_SystemMessage NOT_EQUALS_VERSION			=	new S_SystemMessage("서버버전이 업데이트 되었습니다.접속기를 재실행 하시고 본섭패치를 다시 받아주세요."); // CHECKED OK
	public static final S_SystemMessage NOT_EQUALS_VERSION			=	new S_SystemMessage(S_SystemMessage.getRefText(771), true);
//AUTO SRM: 	public static final S_SystemMessage TWO_CHAR_CHECK				=	new S_SystemMessage("존재버그 강제종료! 재접속하세요"); // CHECKED OK
	public static final S_SystemMessage TWO_CHAR_CHECK				=	new S_SystemMessage(S_SystemMessage.getRefText(772), true);
//AUTO SRM: 	public static final S_SystemMessage STANBY_USE_FAIL_MSG			=	new S_SystemMessage("오픈대기중에는 사용할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage STANBY_USE_FAIL_MSG			=	new S_SystemMessage(S_SystemMessage.getRefText(773), true);
//AUTO SRM: 	public static final S_SystemMessage STANBY_FAIL_MSG				=	new S_SystemMessage("오픈대기중에는 이용할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage STANBY_FAIL_MSG				=	new S_SystemMessage(S_SystemMessage.getRefText(774), true);
//AUTO SRM: 	public static final S_SystemMessage STANBY_EXP_EMPTY_MSG		=	new S_SystemMessage("현재 오픈대기 상태로 경험치가 없습니다."); // CHECKED OK
	public static final S_SystemMessage STANBY_EXP_EMPTY_MSG		=	new S_SystemMessage(S_SystemMessage.getRefText(760), true);
//AUTO SRM: 	public static final S_SystemMessage SERVER_DOWN_SHOP_FAIL		=	new S_SystemMessage("서버다운 진행중에는 구매가 불가능합니다."); // CHECKED OK
	public static final S_SystemMessage SERVER_DOWN_SHOP_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(775), true);
//AUTO SRM: 	public static final S_SystemMessage SHIP_DRIVE_MESSAGE			=	new S_SystemMessage("배가 출발하여 행동이 제한 됩니다."); // CHECKED OK
	public static final S_SystemMessage SHIP_DRIVE_MESSAGE			=	new S_SystemMessage(S_SystemMessage.getRefText(776), true);
//AUTO SRM: 	public static final S_SystemMessage SAFTY_MODE_MSG				=	new S_SystemMessage("보호 모드 상태입니다."); // CHECKED OK
	public static final S_SystemMessage SAFTY_MODE_MSG				=	new S_SystemMessage(S_SystemMessage.getRefText(777), true);
//AUTO SRM: 	public static final S_SystemMessage SAFTY_MODE_PENALTY_MSG		=	new S_SystemMessage("보호 모드: 사망 패널티를 받지 않습니다."); // CHECKED OK
	public static final S_SystemMessage SAFTY_MODE_PENALTY_MSG		=	new S_SystemMessage(S_SystemMessage.getRefText(778), true);
//AUTO SRM: 	public static final S_SystemMessage INVIS_USE_FAIL_MSG			=	new S_SystemMessage("투명 상태에선 사용하실 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage INVIS_USE_FAIL_MSG			=	new S_SystemMessage(S_SystemMessage.getRefText(779), true);
//AUTO SRM: 	public static final S_SystemMessage CONSUME_CHECK_FAIL			=	new S_SystemMessage("재료가 부족합니다."); // CHECKED OK
	public static final S_SystemMessage CONSUME_CHECK_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(780), true);
//AUTO SRM: 	public static final S_SystemMessage ITEM_EMPTY					=	new S_SystemMessage("정상적인 아이템이 아닙니다."); // CHECKED OK
	public static final S_SystemMessage ITEM_EMPTY					=	new S_SystemMessage(S_SystemMessage.getRefText(781), true);
//AUTO SRM: 	public static final S_SystemMessage ONE_BUY_MSG					=	new S_SystemMessage("1개씩 구입할 수 있습니다."); // CHECKED OK
	public static final S_SystemMessage ONE_BUY_MSG					=	new S_SystemMessage(S_SystemMessage.getRefText(782), true);
//AUTO SRM: 	public static final S_SystemMessage BUY_COUNT_MAX				=	new S_SystemMessage("구매 가능 횟수 초과"); // CHECKED OK
	public static final S_SystemMessage BUY_COUNT_MAX				=	new S_SystemMessage(S_SystemMessage.getRefText(783), true);
//AUTO SRM: 	public static final S_SystemMessage BUY_ADENA_MAX_COUNT_FAIL	=	new S_SystemMessage("구매가격이 20억을 초과하엿습니다."); // CHECKED OK
	public static final S_SystemMessage BUY_ADENA_MAX_COUNT_FAIL	=	new S_SystemMessage(S_SystemMessage.getRefText(784), true);
//AUTO SRM: 	public static final S_SystemMessage BUY_RANKING_FAIL			=	new S_SystemMessage("구매 가능한 계급이 아닙니다."); // CHECKED OK
	public static final S_SystemMessage BUY_RANKING_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(785), true);
//AUTO SRM: 	public static final S_SystemMessage BUY_INTER_FAIL				=	new S_SystemMessage("인터서버에선 구매할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage BUY_INTER_FAIL				=	new S_SystemMessage(S_SystemMessage.getRefText(786), true);
//AUTO SRM: 	public static final S_SystemMessage PACKAGE_SHOP_OTHER_ITEM		=	new S_SystemMessage("패킷상점에서 구매하지 않은 아이템이 포함되어 있습니다."); // CHECKED OK
	public static final S_SystemMessage PACKAGE_SHOP_OTHER_ITEM		=	new S_SystemMessage(S_SystemMessage.getRefText(787), true);
//AUTO SRM: 	public static final S_SystemMessage TWO_ITEM_BUY_FAIL			=	new S_SystemMessage("한번에 서로 다른아이템을 구입할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage TWO_ITEM_BUY_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(788), true);
//AUTO SRM: 	public static final S_SystemMessage BUY_ITEM_MAX_COUNT_MSG		=	new S_SystemMessage("최대 구매수량 : 잡템류(15) / 장비(1)"); // CHECKED OK
	public static final S_SystemMessage BUY_ITEM_MAX_COUNT_MSG		=	new S_SystemMessage(S_SystemMessage.getRefText(789), true);
//AUTO SRM: 	public static final S_SystemMessage OTHER_CHAR_CANCEL_FAIL		=	new S_SystemMessage("알림: 해당 케릭터만 취소를 할 수 있습니다."); // CHECKED OK
	public static final S_SystemMessage OTHER_CHAR_CANCEL_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(790), true);
//AUTO SRM: 	public static final S_SystemMessage EXCLUDE_ME_FAIL				=	new S_SystemMessage("알림: 자기 자신은 차단 할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage EXCLUDE_ME_FAIL				=	new S_SystemMessage(S_SystemMessage.getRefText(791), true);
//AUTO SRM: 	public static final S_SystemMessage PRIVATE_SHOP_EXPLAN			=	new S_SystemMessage("명령어 [.무인상점] 누른후 다른 캐릭터로 접속 가능합니다"); // CHECKED OK
	public static final S_SystemMessage PRIVATE_SHOP_EXPLAN			=	new S_SystemMessage(S_SystemMessage.getRefText(792), true);
//AUTO SRM: 	public static final S_SystemMessage PRIVATE_SHOP_EXPLAN_REMA	=	new S_SystemMessage("무인상점시 열려있는 상점창을 닫으셔야 바닥 잔상이 남지 않습니다."); // CHECKED OK
	public static final S_SystemMessage PRIVATE_SHOP_EXPLAN_REMA	=	new S_SystemMessage(S_SystemMessage.getRefText(793), true);
//AUTO SRM: 	public static final S_SystemMessage PRIVATE_SHOP_MAX_FAIL		=	new S_SystemMessage("무인상점은 한개의 캐릭터만 가능합니다."); // CHECKED OK
	public static final S_SystemMessage PRIVATE_SHOP_MAX_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(794), true);
//AUTO SRM: 	public static final S_SystemMessage PRIVATE_SHOP_ITEM_FAIL		=	new S_SystemMessage("비정상 아이템 입니다. 다시 시도해주세요."); // CHECKED OK
	public static final S_SystemMessage PRIVATE_SHOP_ITEM_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(795), true);
//AUTO SRM: 	public static final S_SystemMessage PRIVATE_SHOP_ITEM_MAX		=	new S_SystemMessage("물품등록은 7개까지만 가능합니다."); // CHECKED OK
	public static final S_SystemMessage PRIVATE_SHOP_ITEM_MAX		=	new S_SystemMessage(S_SystemMessage.getRefText(796), true);
//AUTO SRM: 	public static final S_SystemMessage PRIVATE_SHOP_SELF_FIAL		=	new S_SystemMessage("자신의 상점은 이용할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage PRIVATE_SHOP_SELF_FIAL		=	new S_SystemMessage(S_SystemMessage.getRefText(797), true);
//AUTO SRM: 	public static final S_SystemMessage TARGET_CLAN_EMPTY			=	new S_SystemMessage("대상 혈맹이 발견되지 않았습니다."); // CHECKED OK
	public static final S_SystemMessage TARGET_CLAN_EMPTY			=	new S_SystemMessage(S_SystemMessage.getRefText(798), true);
//AUTO SRM: 	public static final S_SystemMessage TARGET_PC_EMPTY				=	new S_SystemMessage("대상이 발견되지 않았습니다."); // CHECKED OK
	public static final S_SystemMessage TARGET_PC_EMPTY				=	new S_SystemMessage(S_SystemMessage.getRefText(26), true);
//AUTO SRM: 	public static final S_SystemMessage SAME_CLAN_CLIME_FAIL		=	new S_SystemMessage("자신의 혈에 공성 선포는 불가능합니다."); // CHECKED OK
	public static final S_SystemMessage SAME_CLAN_CLIME_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(799), true);
//AUTO SRM: 	public static final S_SystemMessage SLOG_INDEX_FAIL				=	new S_SystemMessage("좌측 슬롯부터 개방 하십시요."); // CHECKED OK
	public static final S_SystemMessage SLOG_INDEX_FAIL				=	new S_SystemMessage(S_SystemMessage.getRefText(800), true);
//AUTO SRM: 	public static final S_SystemMessage SLOG_95_RING_INDEX_FAIL		=	new S_SystemMessage("60레벨 반지를 개방 하십시요."); // CHECKED OK
	public static final S_SystemMessage SLOG_95_RING_INDEX_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(801), true);
//AUTO SRM: 	public static final S_SystemMessage SLOG_100_RING_INDEX_FAIL	=	new S_SystemMessage("95레벨 반지를 개방 하십시요."); // CHECKED OK
	public static final S_SystemMessage SLOG_100_RING_INDEX_FAIL	=	new S_SystemMessage(S_SystemMessage.getRefText(802), true);
//AUTO SRM: 	public static final S_SystemMessage SLOG_101_EARRING_INDEX_FAIL	=	new S_SystemMessage("60레벨 귀걸이를 개방 하십시요."); // CHECKED OK
	public static final S_SystemMessage SLOG_101_EARRING_INDEX_FAIL	=	new S_SystemMessage(S_SystemMessage.getRefText(803), true);
//AUTO SRM: 	public static final S_SystemMessage SLOG_103_EARRING_INDEX_FAIL	=	new S_SystemMessage("101레벨 귀걸이를 개방 하십시요."); // CHECKED OK
	public static final S_SystemMessage SLOG_103_EARRING_INDEX_FAIL	=	new S_SystemMessage(S_SystemMessage.getRefText(804), true);
//AUTO SRM: 	public static final S_SystemMessage NOT_CHATTING_MESSAGE		=	new S_SystemMessage("중요한 공지가 있어 일부 채팅이 금지되었습니다."); // CHECKED OK
	public static final S_SystemMessage NOT_CHATTING_MESSAGE		=	new S_SystemMessage(S_SystemMessage.getRefText(805), true);
//AUTO SRM: 	public static final S_SystemMessage BATTLE_ZONE_CHATTING		=	new S_SystemMessage("프리미엄 배틀존 진행중에는 일반채팅만 가능합니다."); // CHECKED OK
	public static final S_SystemMessage BATTLE_ZONE_CHATTING		=	new S_SystemMessage(S_SystemMessage.getRefText(806), true);
//AUTO SRM: 	public static final S_SystemMessage PINK_NAME_CHATTING			=	new S_SystemMessage("보라상태에서는 채팅이 불가능합니다.(혈맹,파티채팅 가능)"); // CHECKED OK
	public static final S_SystemMessage PINK_NAME_CHATTING			=	new S_SystemMessage(S_SystemMessage.getRefText(807), true);
//AUTO SRM: 	public static final S_SystemMessage CRAFT_WEIGHT_FAIL			=	new S_SystemMessage("제작 실패: 무게 게이지 90% 이상 불가."); // CHECKED OK
	public static final S_SystemMessage CRAFT_WEIGHT_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(808), true);
//AUTO SRM: 	public static final S_SystemMessage DEVIL_OPEN					=	new S_SystemMessage("악마왕의 영토가 열렸습니다."); // CHECKED OK
	public static final S_SystemMessage DEVIL_OPEN					=	new S_SystemMessage(S_SystemMessage.getRefText(750), true);
//AUTO SRM: 	public static final S_SystemMessage DEVIL_END					=	new S_SystemMessage("악마왕의 영토가 닫혔습니다."); // CHECKED OK
	public static final S_SystemMessage DEVIL_END					=	new S_SystemMessage(S_SystemMessage.getRefText(751), true);
//AUTO SRM: 	public static final S_SystemMessage ISLAND_OPEN					=	new S_SystemMessage("이스발: 잊혀진 섬이 열렷습니다."); // CHECKED OK
	public static final S_SystemMessage ISLAND_OPEN					=	new S_SystemMessage(S_SystemMessage.getRefText(752), true);
//AUTO SRM: 	public static final S_SystemMessage ISLAND_END					=	new S_SystemMessage("이스발: 잊혀진 섬이 닫혓습니다."); // CHECKED OK
	public static final S_SystemMessage ISLAND_END					=	new S_SystemMessage(S_SystemMessage.getRefText(753), true);
//AUTO SRM: 	public static final S_SystemMessage DOMINATION_OPEN				=	new S_SystemMessage("지배의 균열이 연결되었습니다."); // CHECKED OK
	public static final S_SystemMessage DOMINATION_OPEN				=	new S_SystemMessage(S_SystemMessage.getRefText(754), true);
//AUTO SRM: 	public static final S_SystemMessage DOMINATION_END				=	new S_SystemMessage("지배의 균열이 끊어졌습니다."); // CHECKED OK
	public static final S_SystemMessage DOMINATION_END				=	new S_SystemMessage(S_SystemMessage.getRefText(755), true);
//AUTO SRM: 	public static final S_SystemMessage BLACK_DRAGON_OPEN			=	new S_SystemMessage("암흑룡의 던전이 개방되었습니다."); // CHECKED OK
	public static final S_SystemMessage BLACK_DRAGON_OPEN			=	new S_SystemMessage(S_SystemMessage.getRefText(756), true);
//AUTO SRM: 	public static final S_SystemMessage BLACK_DRAGON_END			=	new S_SystemMessage("암흑룡의 던전이 종료되었습니다."); // CHECKED OK
	public static final S_SystemMessage BLACK_DRAGON_END			=	new S_SystemMessage(S_SystemMessage.getRefText(757), true);
//AUTO SRM: 	public static final S_SystemMessage ISLAND_CLOSE				=	new S_SystemMessage("잊혀진 섬의 균열이 닫혀 있습니다."); // CHECKED OK
	public static final S_SystemMessage ISLAND_CLOSE				=	new S_SystemMessage(S_SystemMessage.getRefText(809), true);
//AUTO SRM: 	public static final S_SystemMessage INTER_SERVER_CLOSE			=	new S_SystemMessage("차원의 연결이 끊어져 있습니다."); // CHECKED OK
	public static final S_SystemMessage INTER_SERVER_CLOSE			=	new S_SystemMessage(S_SystemMessage.getRefText(810), true);
//AUTO SRM: 	public static final S_SystemMessage BLACK_DRAGON_CLOSE			=	new S_SystemMessage("암흑룡의 던전이 닫혀 있습니다."); // CHECKED OK
	public static final S_SystemMessage BLACK_DRAGON_CLOSE			=	new S_SystemMessage(S_SystemMessage.getRefText(811), true);
//AUTO SRM: 	public static final S_SystemMessage PCCAFE_BUFF_EMPTY			=	new S_SystemMessage("PC방 버프가 적용중이지 않습니다."); // CHECKED OK
	public static final S_SystemMessage PCCAFE_BUFF_EMPTY			=	new S_SystemMessage(S_SystemMessage.getRefText(812), true);
//AUTO SRM: 	public static final S_SystemMessage PCCAFE_BUFF_RE_USE			=	new S_SystemMessage("알림: 이미 PC방 버프 상품이 적용중입니다."); // CHECKED OK
	public static final S_SystemMessage PCCAFE_BUFF_RE_USE			=	new S_SystemMessage(S_SystemMessage.getRefText(813), true);
//AUTO SRM: 	public static final S_SystemMessage PCCAFE_BUFF_END				=	new S_SystemMessage("[PC방 상품 종료 안내] PC방 이용 시간이 종료되었습니다."); // CHECKED OK
	public static final S_SystemMessage PCCAFE_BUFF_END				=	new S_SystemMessage(S_SystemMessage.getRefText(758), true);
//AUTO SRM: 	public static final S_SystemMessage HUNT_OPTION_EXPLAN			=	new S_SystemMessage("수배로 인한 근/원거리 대미지+3,공성+3, SP+3 적용중."); // CHECKED OK
	public static final S_SystemMessage HUNT_OPTION_EXPLAN			=	new S_SystemMessage(S_SystemMessage.getRefText(814), true);
//AUTO SRM: 	public static final S_SystemMessage SEAL_PAPER_GET_MSG			=	new S_SystemMessage("봉인해제 주문서가 지급되었습니다."); // CHECKED OK
	public static final S_SystemMessage SEAL_PAPER_GET_MSG			=	new S_SystemMessage(S_SystemMessage.getRefText(815), true);
//AUTO SRM: 	public static final S_SystemMessage SURVIVE_CHARGE				=	new S_SystemMessage("생존의 외침이 충전되어 있습니다."); // CHECKED OK
	public static final S_SystemMessage SURVIVE_CHARGE				=	new S_SystemMessage(S_SystemMessage.getRefText(816), true);
//AUTO SRM: 	public static final S_SystemMessage LEVEL_DOWN_WARRING			=	new S_SystemMessage("\\aG[경고] \\aD한번 더 레벨 다운시 캐릭이 압류 됩니다."); // CHECKED OK
	public static final S_SystemMessage LEVEL_DOWN_WARRING			=	new S_SystemMessage(S_SystemMessage.getRefText(817), true);
//AUTO SRM: 	public static final S_SystemMessage GRANGKAIN_LEVEL_1			=	new S_SystemMessage("그랑카인의 분노 1단계"); // CHECKED OK
	public static final S_SystemMessage GRANGKAIN_LEVEL_1			=	new S_SystemMessage(S_SystemMessage.getRefText(818), true);
//AUTO SRM: 	public static final S_SystemMessage GRANGKAIN_LEVEL_2			=	new S_SystemMessage("그랑카인의 분노 2단계"); // CHECKED OK
	public static final S_SystemMessage GRANGKAIN_LEVEL_2			=	new S_SystemMessage(S_SystemMessage.getRefText(819), true);
//AUTO SRM: 	public static final S_SystemMessage GRANGKAIN_LEVEL_3			=	new S_SystemMessage("그랑카인의 분노 3단계"); // CHECKED OK
	public static final S_SystemMessage GRANGKAIN_LEVEL_3			=	new S_SystemMessage(S_SystemMessage.getRefText(820), true);
//AUTO SRM: 	public static final S_SystemMessage GRANGKAIN_LEVEL_4			=	new S_SystemMessage("그랑카인의 분노 4단계"); // CHECKED OK
	public static final S_SystemMessage GRANGKAIN_LEVEL_4			=	new S_SystemMessage(S_SystemMessage.getRefText(821), true);
//AUTO SRM: 	public static final S_SystemMessage GRANGKAIN_LEVEL_5			=	new S_SystemMessage("그랑카인의 분노 5단계"); // CHECKED OK
	public static final S_SystemMessage GRANGKAIN_LEVEL_5			=	new S_SystemMessage(S_SystemMessage.getRefText(822), true);
//AUTO SRM: 	public static final S_SystemMessage GRANGKAIN_LEVEL_6			=	new S_SystemMessage("그랑카인의 분노 6단계"); // CHECKED OK
	public static final S_SystemMessage GRANGKAIN_LEVEL_6			=	new S_SystemMessage(S_SystemMessage.getRefText(823), true);
//AUTO SRM: 	public static final S_SystemMessage PLAY_SUPPORT_FAIL			=	new S_SystemMessage("플레이서포트를 사용할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage PLAY_SUPPORT_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(824), true);
//AUTO SRM: 	public static final S_SystemMessage PLAY_SUPPORT_AUTH_ITEM_FAIL	=	new S_SystemMessage("플레이서포트 인증 아이템이 없습니다."); // CHECKED OK
	public static final S_SystemMessage PLAY_SUPPORT_AUTH_ITEM_FAIL	=	new S_SystemMessage(S_SystemMessage.getRefText(825), true);
//AUTO SRM: 	public static final S_SystemMessage PLAY_SUPPORT_ALL_DISABLED	=	new S_SystemMessage("PSS "모두" 모드가 비활성화되었습니다. 불편을 끼쳐드려 죄송합니다."); // CHECKED OK	
	public static final S_SystemMessage PLAY_SUPPORT_ALL_DISABLED	=	new S_SystemMessage(S_SystemMessage.getRefText(1417), true);
//AUTO SRM: 	public static final S_SystemMessage USE_NOT_CASTEL_FAIL			=	new S_SystemMessage("내성 또는 지하 아지트에서만 사용 가능합니다."); // CHECKED OK
	public static final S_SystemMessage USE_NOT_CASTEL_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(826), true);
//AUTO SRM: 	public static final S_SystemMessage INSTANCE_DUNGEON_MAX		=	new S_SystemMessage("더이상 인스턴스 던전을 생성할 수 없습니다. 나중에 다시 시도하십시오."); // CHECKED OK
	public static final S_SystemMessage INSTANCE_DUNGEON_MAX		=	new S_SystemMessage(S_SystemMessage.getRefText(827), true);
//AUTO SRM: 	public static final S_SystemMessage CLAN_DUNGEON_DAILY_MAX		=	new S_SystemMessage("데일리 혈맹 던전을 더이상 생성할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage CLAN_DUNGEON_DAILY_MAX		=	new S_SystemMessage(S_SystemMessage.getRefText(828), true);
//AUTO SRM: 	public static final S_SystemMessage CLAN_DUNGEON_WEEKLY_MAX		=	new S_SystemMessage("위클리 혈맹 던전을 더이상 생성할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage CLAN_DUNGEON_WEEKLY_MAX		=	new S_SystemMessage(S_SystemMessage.getRefText(829), true);
//AUTO SRM: 	public static final S_SystemMessage CLAN_DUNGEON_ZONE_MAX		=	new S_SystemMessage("혈맹 집결지를 더이상 생성할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage CLAN_DUNGEON_ZONE_MAX		=	new S_SystemMessage(S_SystemMessage.getRefText(830), true);
//AUTO SRM: 	public static final S_SystemMessage LIMIT_LEVEL_EXP_FAIL		=	new S_SystemMessage("레벨 제한으로 인해  더이상 경험치를 획득할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage LIMIT_LEVEL_EXP_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(831), true);
//AUTO SRM: 	public static final S_SystemMessage RANKING_POTION_FAIL			=	new S_SystemMessage("현재 경험치가 더 높습니다."); // CHECKED OK
	public static final S_SystemMessage RANKING_POTION_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(832), true);
//AUTO SRM: 	public static final S_SystemMessage ADENA_OVER_MAX_FAIL			=	new S_SystemMessage("아데나가 2,000,000,000을 초과하므로 사용 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage ADENA_OVER_MAX_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(833), true);
//AUTO SRM: 	public static final S_SystemMessage ADENA_FICKUP_MAX_FAIL		=	new S_SystemMessage("아데나가 2,000,000,000을 초과하므로 주울 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage ADENA_FICKUP_MAX_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(834), true);
//AUTO SRM: 	public static final S_SystemMessage ADENA_LOOT_MAX_FAIL			=	new S_SystemMessage("소지하고 있는 아데나가 2,000,000,000을 초과하고 있습니다."); // CHECKED OK
	public static final S_SystemMessage ADENA_LOOT_MAX_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(835), true);
//AUTO SRM: 	public static final S_SystemMessage HOUSE_PRICE_SETTING_FAIL	=	new S_SystemMessage("소지금액 이상을 설정할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage HOUSE_PRICE_SETTING_FAIL	=	new S_SystemMessage(S_SystemMessage.getRefText(836), true);
//AUTO SRM: 	public static final S_SystemMessage WRITE_TIME_FAIL				=	new S_SystemMessage("입력 시간이 초과되었습니다."); // CHECKED OK
	public static final S_SystemMessage WRITE_TIME_FAIL				=	new S_SystemMessage(S_SystemMessage.getRefText(837), true);
//AUTO SRM: 	public static final S_SystemMessage TARGET_CLAN_CROWN_NO_AGREE	=	new S_SystemMessage("상대 혈맹의 군주가 거부하였습니다."); // CHECKED OK
	public static final S_SystemMessage TARGET_CLAN_CROWN_NO_AGREE	=	new S_SystemMessage(S_SystemMessage.getRefText(838), true);
//AUTO SRM: 	public static final S_SystemMessage TRADE_TARGET_RANGE_FAIL		=	new S_SystemMessage("대상과 거리가 너무 멀어 거래를 할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage TRADE_TARGET_RANGE_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(839), true);
//AUTO SRM: 	public static final S_SystemMessage TARGET_NAME_CHECK_FAIL		=	new S_SystemMessage("그러한 케릭명을 가진 사람이 없습니다."); // CHECKED OK
	public static final S_SystemMessage TARGET_NAME_CHECK_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(840), true);
//AUTO SRM: 	public static final S_SystemMessage BOARD_DELETE_FAIL			=	new S_SystemMessage("게시판 글은 삭제 불가능 합니다."); // CHECKED OK
	public static final S_SystemMessage BOARD_DELETE_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(841), true);
//AUTO SRM: 	public static final S_SystemMessage BOARD_TITLE_RANGE_FAIL		=	new S_SystemMessage("게시판 제목 글자수가 초과하였습니다."); // CHECKED OK
	public static final S_SystemMessage BOARD_TITLE_RANGE_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(842), true);
//AUTO SRM: 	public static final S_SystemMessage BOARD_WRITE_LEVEL			=	new S_SystemMessage("글쓰기 레벨 : 30"); // CHECKED OK
	public static final S_SystemMessage BOARD_WRITE_LEVEL			=	new S_SystemMessage(S_SystemMessage.getRefText(843), true);
//AUTO SRM: 	public static final S_SystemMessage BOARD_GM_FAIL				=	new S_SystemMessage("\\aH운영자 전용 게시판 입니다."); // CHECKED OK
	public static final S_SystemMessage BOARD_GM_FAIL				=	new S_SystemMessage(S_SystemMessage.getRefText(844), true);
//AUTO SRM: 	public static final S_SystemMessage WAREHOUSE_5LEVEL			=	new S_SystemMessage("창고: 5레벨 부터 이용할 수 있습니다."); // CHECKED OK
	public static final S_SystemMessage WAREHOUSE_5LEVEL			=	new S_SystemMessage(S_SystemMessage.getRefText(845), true);
//AUTO SRM: 	public static final S_SystemMessage WAREHOUSE_20LEVEL			=	new S_SystemMessage("창고: 20레벨 부터 이용할 수 있습니다."); // CHECKED OK
	public static final S_SystemMessage WAREHOUSE_20LEVEL			=	new S_SystemMessage(S_SystemMessage.getRefText(846), true);
//AUTO SRM: 	public static final S_SystemMessage NOTI_BUFF_DELAY_CHECK		=	new S_SystemMessage("로그인 후 30초간 창고 & 버리기가 불가능 합니다."); // CHECKED OK
	public static final S_SystemMessage NOTI_BUFF_DELAY_CHECK		=	new S_SystemMessage(S_SystemMessage.getRefText(847), true);
//AUTO SRM: 	public static final S_SystemMessage WAR_TIME_ACTION_FAIL		=	new S_SystemMessage("공성 중에는 불가능합니다."); // CHECKED OK
	public static final S_SystemMessage WAR_TIME_ACTION_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(848), true);
//AUTO SRM: 	public static final S_SystemMessage NO_DROP_ZONE_MSG			=	new S_SystemMessage("해당 지역에서는 아이템을 버릴수 없습니다."); // CHECKED OK
	public static final S_SystemMessage NO_DROP_ZONE_MSG			=	new S_SystemMessage(S_SystemMessage.getRefText(849), true);
//AUTO SRM: 	public static final S_SystemMessage INN_KEY_CANNOT_GIVE			=	new S_SystemMessage("여관열쇠는 /교환을 이용하거나 창고를 이용해주세요."); // CHECKED OK
	public static final S_SystemMessage INN_KEY_CANNOT_GIVE			=	new S_SystemMessage(S_SystemMessage.getRefText(850), true);
//AUTO SRM: 	public static final S_SystemMessage DOLL_CHANGE_CALL_FAIL		=	new S_SystemMessage("인형을 소환한 상태로 변경할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage DOLL_CHANGE_CALL_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(851), true);
//AUTO SRM: 	public static final S_SystemMessage DOLL_CHANGE_ITEM_FAIL		=	new S_SystemMessage("변경할 수 없는 아이템 입니다."); // CHECKED OK
	public static final S_SystemMessage DOLL_CHANGE_ITEM_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(852), true);
//AUTO SRM: 	public static final S_SystemMessage GM_RESURECT_MSG				=	new S_SystemMessage("GM이 부활을 해주었습니다."); // CHECKED OK
	public static final S_SystemMessage GM_RESURECT_MSG				=	new S_SystemMessage(S_SystemMessage.getRefText(853), true);
//AUTO SRM: 	public static final S_SystemMessage KILL_DEATH_RESET			=	new S_SystemMessage("알림: 당신의 킬데스가 초기화 되었습니다."); // CHECKED OK
	public static final S_SystemMessage KILL_DEATH_RESET			=	new S_SystemMessage(S_SystemMessage.getRefText(854), true);
//AUTO SRM: 	public static final S_SystemMessage CAOTIC_USE_MSG				=	new S_SystemMessage("카오틱 성향에서만 사용하실 수 있습니다."); // CHECKED OK
	public static final S_SystemMessage CAOTIC_USE_MSG				=	new S_SystemMessage(S_SystemMessage.getRefText(855), true);
//AUTO SRM: 	public static final S_SystemMessage LAWFUL_USE_MSG				=	new S_SystemMessage("라우풀 성향에서만 사용하실 수 있습니다."); // CHECKED OK
	public static final S_SystemMessage LAWFUL_USE_MSG				=	new S_SystemMessage(S_SystemMessage.getRefText(856), true);
//AUTO SRM: 	public static final S_SystemMessage SECURITY_NOT_SETTING		=	new S_SystemMessage("보안설정이 되어 있지 않습니다. 명령어 [.보안설정]"); // CHECKED OK
	public static final S_SystemMessage SECURITY_NOT_SETTING		=	new S_SystemMessage(S_SystemMessage.getRefText(857), true);
//AUTO SRM: 	public static final S_SystemMessage SECURITY_SOLVE_SETTING		=	new S_SystemMessage("보안해제 되어 있지 않습니다. 명령어 [.보안해제]"); // CHECKED OK
	public static final S_SystemMessage SECURITY_SOLVE_SETTING		=	new S_SystemMessage(S_SystemMessage.getRefText(858), true);
//AUTO SRM: 	public static final S_SystemMessage CLAN_EXP_USE_NOT_CLAN		=	new S_SystemMessage("혈맹이 없거나 공헌할 수 없는 혈맹입니다."); // CHECKED OK
	public static final S_SystemMessage CLAN_EXP_USE_NOT_CLAN		=	new S_SystemMessage(S_SystemMessage.getRefText(859), true);
//AUTO SRM: 	public static final S_SystemMessage LETTER_WRITE_LEVEL			=	new S_SystemMessage("30레벨 이하는 편지를 보낼 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage LETTER_WRITE_LEVEL			=	new S_SystemMessage(S_SystemMessage.getRefText(860), true);
//AUTO SRM: 	public static final S_SystemMessage CLAN_RANK_LOW_FAIL			=	new S_SystemMessage("계급 부여 실패 : 계급 부여 권한이 없음."); // CHECKED OK
	public static final S_SystemMessage CLAN_RANK_LOW_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(861), true);
//AUTO SRM: 	public static final S_SystemMessage CLAN_RANK_HIGH_FAIL			=	new S_SystemMessage("계급 부여 실패 : 부여 계급이 자신보다 높거나 같은 계급"); // CHECKED OK
	public static final S_SystemMessage CLAN_RANK_HIGH_FAIL			=	new S_SystemMessage(S_SystemMessage.getRefText(862), true);
//AUTO SRM: 	public static final S_SystemMessage CLAN_ALLIANCE_MAX			=	new S_SystemMessage("동맹은 4개 혈맹 까지만 가능합니다."); // CHECKED OK
	public static final S_SystemMessage CLAN_ALLIANCE_MAX			=	new S_SystemMessage(S_SystemMessage.getRefText(863), true);
//AUTO SRM: 	public static final S_SystemMessage CHAR_TRADE_ITEM_70LEVEL		=	new S_SystemMessage("70레벨 이상은 상급 캐릭터교환주문서를 사용하셔야 합니다."); // CHECKED OK
	public static final S_SystemMessage CHAR_TRADE_ITEM_70LEVEL		=	new S_SystemMessage(S_SystemMessage.getRefText(864), true);
//AUTO SRM: 	public static final S_SystemMessage CHAR_TRADE_ITEM_70LEVEL_LOW	=	new S_SystemMessage("70레벨 미만은 하급 캐릭터교환주문서를 사용하셔야 합니다."); // CHECKED OK
	public static final S_SystemMessage CHAR_TRADE_ITEM_70LEVEL_LOW	=	new S_SystemMessage(S_SystemMessage.getRefText(865), true);
//AUTO SRM: 	public static final S_SystemMessage TRADE_COMPLETE_CANNOT_ADD	=	new S_SystemMessage("올리기 불가능 : 한쪽이 완료를 누른 상태"); // CHECKED OK
	public static final S_SystemMessage TRADE_COMPLETE_CANNOT_ADD	=	new S_SystemMessage(S_SystemMessage.getRefText(866), true);
//AUTO SRM: 	public static final S_SystemMessage MARRY_RING_CHARGE_COMPLETE	=	new S_SystemMessage("결혼 반지가 충전되었습니다."); // CHECKED OK
	public static final S_SystemMessage MARRY_RING_CHARGE_COMPLETE	=	new S_SystemMessage(S_SystemMessage.getRefText(867), true);
//AUTO SRM: 	public static final S_SystemMessage MARRY_RING_CHARGE_MSG		=	new S_SystemMessage("기부해주셔서 감사합니다."); // CHECKED OK
	public static final S_SystemMessage MARRY_RING_CHARGE_MSG		=	new S_SystemMessage(S_SystemMessage.getRefText(868), true);
//AUTO SRM: 	public static final S_SystemMessage MARRY_RING_COUNT_EMPTY		=	new S_SystemMessage("결혼반지 이동횟수를 모두 사용하셨습니다.(충전하세요)"); // CHECKED OK
	public static final S_SystemMessage MARRY_RING_COUNT_EMPTY		=	new S_SystemMessage(S_SystemMessage.getRefText(869), true);
//AUTO SRM: 	public static final S_SystemMessage INN_KEY_EMPTY				=	new S_SystemMessage("대여한 방 또는 홀이 없습니다."); // CHECKED OK
	public static final S_SystemMessage INN_KEY_EMPTY				=	new S_SystemMessage(S_SystemMessage.getRefText(870), true);
//AUTO SRM: 	public static final S_SystemMessage INN_KEY_OTHER_HOUSE			=	new S_SystemMessage("저희 여관 열쇠가 아닙니다."); // CHECKED OK
	public static final S_SystemMessage INN_KEY_OTHER_HOUSE			=	new S_SystemMessage(S_SystemMessage.getRefText(871), true);
//AUTO SRM: 	public static final S_SystemMessage CASTLE_DOOR_FIX				=	new S_SystemMessage("성문 수리: 켄트성의 성문을 수리함."); // CHECKED OK
	public static final S_SystemMessage CASTLE_DOOR_FIX				=	new S_SystemMessage(S_SystemMessage.getRefText(872), true);
//AUTO SRM: 	public static final S_SystemMessage LEVEL_DOWN_CHAR_FAIL		=	new S_SystemMessage("레벨이 다운된 캐릭입니다. 레벨업 후 이용하세요."); // CHECKED OK
	public static final S_SystemMessage LEVEL_DOWN_CHAR_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(873), true);
//AUTO SRM: 	public static final S_SystemMessage RETURN_STAT_LEVEL_FAIL		=	new S_SystemMessage("스텟초기화는 55레벨 이상만 가능합니다."); // CHECKED OK
	public static final S_SystemMessage RETURN_STAT_LEVEL_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(874), true);
//AUTO SRM: 	public static final S_SystemMessage DELAY_MSG					=	new S_SystemMessage("아직 사용할 수 없습니다.(지연시간이 필요)"); // CHECKED OK
	public static final S_SystemMessage DELAY_MSG					=	new S_SystemMessage(S_SystemMessage.getRefText(875), true);
//AUTO SRM: 	public static final S_SystemMessage RING_SLOT_LEFT_OPEN_MSG		=	new S_SystemMessage("좌측 슬롯부터 개방 하십시요."); // CHECKED OK
	public static final S_SystemMessage RING_SLOT_LEFT_OPEN_MSG		=	new S_SystemMessage(S_SystemMessage.getRefText(800), true);
//AUTO SRM: 	public static final S_SystemMessage HOUSE_TAX_EMPTY				=	new S_SystemMessage("더 이상 납부할 세금이 없습니다."); // CHECKED OK
	public static final S_SystemMessage HOUSE_TAX_EMPTY				=	new S_SystemMessage(S_SystemMessage.getRefText(876), true);
//AUTO SRM: 	public static final S_SystemMessage NOT_ENTER_TIME				=	new S_SystemMessage("입장시간이 아닙니다."); // CHECKED OK
	public static final S_SystemMessage NOT_ENTER_TIME				=	new S_SystemMessage(S_SystemMessage.getRefText(877), true);
//AUTO SRM: 	public static final S_SystemMessage SELF_CLAN_JOIN_EMPTY		=	new S_SystemMessage("계정내에 군주가 없거나 혈맹이 창설되지 않았습니다."); // CHECKED OK
	public static final S_SystemMessage SELF_CLAN_JOIN_EMPTY		=	new S_SystemMessage(S_SystemMessage.getRefText(878), true);
//AUTO SRM: 	public static final S_SystemMessage EIN_VALUE_EMPTY_FAIL		=	new S_SystemMessage("아인하사드의 축복이 남아있는 경우에 사용됩니다."); // CHECKED OK
	public static final S_SystemMessage EIN_VALUE_EMPTY_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(879), true);
//AUTO SRM: 	public static final S_SystemMessage EIN_1_54_VALUE				=	new S_SystemMessage("아인하사드의 축복: EXP +53% [1 ~ 54레벨 구간]"); // CHECKED OK
	public static final S_SystemMessage EIN_1_54_VALUE				=	new S_SystemMessage(S_SystemMessage.getRefText(880), true);
//AUTO SRM: 	public static final S_SystemMessage EIN_55_59_VALUE				=	new S_SystemMessage("아인하사드의 축복: EXP +43% [55 ~ 59레벨 구간]"); // CHECKED OK
	public static final S_SystemMessage EIN_55_59_VALUE				=	new S_SystemMessage(S_SystemMessage.getRefText(881), true);
//AUTO SRM: 	public static final S_SystemMessage EIN_60_64_VALUE				=	new S_SystemMessage("아인하사드의 축복: EXP +33% [60 ~ 64레벨 구간]"); // CHECKED OK
	public static final S_SystemMessage EIN_60_64_VALUE				=	new S_SystemMessage(S_SystemMessage.getRefText(882), true);
//AUTO SRM: 	public static final S_SystemMessage EIN_65_69_VALUE				=	new S_SystemMessage("아인하사드의 축복: EXP +23% [65 ~ 69레벨 구간]"); // CHECKED OK
	public static final S_SystemMessage EIN_65_69_VALUE				=	new S_SystemMessage(S_SystemMessage.getRefText(883), true);
//AUTO SRM: 	public static final S_SystemMessage EIN_EXP_150_VALUE			=	new S_SystemMessage("아인하사드의 축복: EXP +150%"); // CHECKED OK
	public static final S_SystemMessage EIN_EXP_150_VALUE			=	new S_SystemMessage(S_SystemMessage.getRefText(884), true);
//AUTO SRM: 	public static final S_SystemMessage DRAGON_RAID_MAX				=	new S_SystemMessage("시스템 메세지 : 아직 드래곤이 모두 깨어 있습니다."); // CHECKED OK
	public static final S_SystemMessage DRAGON_RAID_MAX				=	new S_SystemMessage(S_SystemMessage.getRefText(885), true);
//AUTO SRM: 	public static final S_SystemMessage ENCHANT_MINUS				=	new S_SystemMessage("아이템의 인첸트 수치가 -1 내려갔습니다."); // CHECKED OK
	public static final S_SystemMessage ENCHANT_MINUS				=	new S_SystemMessage(S_SystemMessage.getRefText(886), true);
//AUTO SRM: 	public static final S_SystemMessage ENCHANT_PLUS				=	new S_SystemMessage("아이템의 인첸트 수치가 +1 올라갔습니다."); // CHECKED OK
	public static final S_SystemMessage ENCHANT_PLUS				=	new S_SystemMessage(S_SystemMessage.getRefText(887), true);
//AUTO SRM: 	public static final S_SystemMessage HERO_BUFF_RE_USE			=	new S_SystemMessage("이미 영웅의 가호 버프 상품이 적용중입니다."); // CHECKED OK
	public static final S_SystemMessage HERO_BUFF_RE_USE			=	new S_SystemMessage(S_SystemMessage.getRefText(888), true);
//AUTO SRM: 	public static final S_SystemMessage LIFE_BUFF_RE_USE			=	new S_SystemMessage("이미 생명의 가호 버프 상품이 적용중입니다."); // CHECKED OK
	public static final S_SystemMessage LIFE_BUFF_RE_USE			=	new S_SystemMessage(S_SystemMessage.getRefText(889), true);
//AUTO SRM: 	public static final S_SystemMessage PET_RETURN_STAT_LEVEL		=	new S_SystemMessage("펫: 펫 회상의 촛불은 10레벨 이상부터 사용이 가능합니다."); // CHECKED OK
	public static final S_SystemMessage PET_RETURN_STAT_LEVEL		=	new S_SystemMessage(S_SystemMessage.getRefText(890), true);
//AUTO SRM: 	public static final S_SystemMessage EIN_STAT_RESET				=	new S_SystemMessage("아인하사드 스탯이 초기화 되었습니다."); // CHECKED OK
	public static final S_SystemMessage EIN_STAT_RESET				=	new S_SystemMessage(S_SystemMessage.getRefText(891), true);
//AUTO SRM: 	public static final S_SystemMessage ITEM_BLESS_CHAGE_FAIL		=	new S_SystemMessage("축복의 기운이 스며들지 못하였습니다."); // CHECKED OK
	public static final S_SystemMessage ITEM_BLESS_CHAGE_FAIL		=	new S_SystemMessage(S_SystemMessage.getRefText(892), true);
	public static final S_SystemMessage REAPER_SPAWN_MSG_1			=	new S_SystemMessage("$27492");// 때가 왔다
	public static final S_SystemMessage REAPER_SPAWN_MSG_2			=	new S_SystemMessage("$27493");// 죽음의 문이 열리고
	public static final S_SystemMessage REAPER_SPAWN_MSG_3			=	new S_SystemMessage("$27494");// 나뉘었던 고대의 힘이 완성되었다
	public static final S_SystemMessage REAPER_SPAWN_MSG_4			=	new S_SystemMessage("$27495");// 이제 제물을 받을 준비가 되었구나
//AUTO SRM: 	public static final S_SystemMessage REAPER_DIE_TELEPORT_MSG		=	new S_SystemMessage("리퍼의 제단에 있는 영웅들은 시작지점으로 이동됩니다."); // CHECKED OK
	public static final S_SystemMessage REAPER_DIE_TELEPORT_MSG		=	new S_SystemMessage(S_SystemMessage.getRefText(763), true);
//AUTO SRM: 	public static final S_SystemMessage BARLOG_SPAWN				=	new S_SystemMessage("발록이 출현하여 마을로 이동됩니다."); // CHECKED OK
	public static final S_SystemMessage BARLOG_SPAWN				=	new S_SystemMessage(S_SystemMessage.getRefText(762), true);
//AUTO SRM: 	public static final S_SystemMessage RAZARUS_SPAWN				=	new S_SystemMessage("라자루스가 출현하였습니다."); // CHECKED OK
	public static final S_SystemMessage RAZARUS_SPAWN				=	new S_SystemMessage(S_SystemMessage.getRefText(765), true);
//AUTO SRM: 	public static final S_SystemMessage LOGIN_WAR_CHECK_MSG			=	new S_SystemMessage("공성전이 진행중입니다."); // CHECKED OK
	public static final S_SystemMessage LOGIN_WAR_CHECK_MSG			=	new S_SystemMessage(S_SystemMessage.getRefText(893), true);
//AUTO SRM: 	public static final S_SystemMessage LOGIN_WAR_CASTLE_MSG		=	new S_SystemMessage("성을 소유하고 있는 혈맹은 다음과 같습니다."); // CHECKED OK
	public static final S_SystemMessage LOGIN_WAR_CASTLE_MSG		=	new S_SystemMessage(S_SystemMessage.getRefText(894), true);
//AUTO SRM: 	public static final S_SystemMessage CRAFT_EMPTY_MSG				=	new S_SystemMessage("해당 물품은 제작할 수 없습니다."); // CHECKED OK
	public static final S_SystemMessage CRAFT_EMPTY_MSG				=	new S_SystemMessage(S_SystemMessage.getRefText(895), true);
//AUTO SRM: 	public static final S_SystemMessage CRAFT_BLOCK_MSG				=	new S_SystemMessage("해당 제작은 서비스가 일시적으로 중단되었습니다."); // CHECKED OK
	public static final S_SystemMessage CRAFT_BLOCK_MSG				=	new S_SystemMessage(S_SystemMessage.getRefText(896), true);
//AUTO SRM: 	public static final S_SystemMessage EXP_REFAIR_ANOTHER_WAY		=	new S_SystemMessage("경험치 복구방식이 잘못 되었습니다.(파워북 참조)"); // CHECKED OK
	public static final S_SystemMessage EXP_REFAIR_ANOTHER_WAY		=	new S_SystemMessage(S_SystemMessage.getRefText(897), true);
//AUTO SRM: 	public static final S_SystemMessage BEGIN_LEVEL_MAGIC_SAFE		=	new S_SystemMessage("\\aG[!] 신규보호로 상대방의 마법을 보호받고 있습니다"); // CHECKED OK
	public static final S_SystemMessage BEGIN_LEVEL_MAGIC_SAFE		=	new S_SystemMessage(S_SystemMessage.getRefText(898), true);
//AUTO SRM: 	public static final S_SystemMessage BEGIN_CLAN_MAGIC_SAFE		=	new S_SystemMessage("\\aG[!] 신규혈맹보호로 상대방의 마법을 보호받고 있습니다"); // CHECKED OK
	public static final S_SystemMessage BEGIN_CLAN_MAGIC_SAFE		=	new S_SystemMessage(S_SystemMessage.getRefText(899), true);
//AUTO SRM: 	public static final S_SystemMessage BEGIN_AREA_MAGIC_SAFE		=	new S_SystemMessage("\\aG[!] 신규보호존 상대방의 마법을 보호받고 있습니다"); // CHECKED OK
	public static final S_SystemMessage BEGIN_AREA_MAGIC_SAFE		=	new S_SystemMessage(S_SystemMessage.getRefText(900), true);
//AUTO SRM: 	public static final S_SystemMessage BEGIN_LEVEL_HALF_DAMAGE		=	new S_SystemMessage("신규 레벨은 대미지의 50%만 가해집니다."); // CHECKED OK
	public static final S_SystemMessage BEGIN_LEVEL_HALF_DAMAGE		=	new S_SystemMessage(S_SystemMessage.getRefText(901), true);
//AUTO SRM: 	public static final S_SystemMessage BEGIN_CLAN_CANNOT_ATTACK	=	new S_SystemMessage("신규보호 혈맹은 상호간에 공격이 되지 않습니다."); // CHECKED OK
	public static final S_SystemMessage BEGIN_CLAN_CANNOT_ATTACK	=	new S_SystemMessage(S_SystemMessage.getRefText(902), true);
//AUTO SRM: 	public static final S_SystemMessage BEGIN_CLAN_HALF_DAMAGE		=	new S_SystemMessage("신규보호혈맹은 대미지의 50%만 가해집니다."); // CHECKED OK
	public static final S_SystemMessage BEGIN_CLAN_HALF_DAMAGE		=	new S_SystemMessage(S_SystemMessage.getRefText(903), true);
//AUTO SRM: 	public static final S_SystemMessage BEGIN_AREA_CANNOT_ATTACK	=	new S_SystemMessage("신규보호존은 상호간에 공격이 되지 않습니다."); // CHECKED OK
	public static final S_SystemMessage BEGIN_AREA_CANNOT_ATTACK	=	new S_SystemMessage(S_SystemMessage.getRefText(904), true);
//AUTO SRM: 	public static final S_SystemMessage INTER_SERVER_CONNECT_FAIL	=	new S_SystemMessage("\\f3순간 동시 사용자 수가 많아 이동에 실패했습니다. 잠시 후 재시도해주세요."); // CHECKED OK
	public static final S_SystemMessage INTER_SERVER_CONNECT_FAIL	=	new S_SystemMessage(S_SystemMessage.getRefText(905), true);
//AUTO SRM: 	public static final S_SystemMessage WHALE_MAP_NOT_EMPTY			=	new S_SystemMessage("이미 누군가가 입장하엿습니다. 잠시 후 재시도해주세요."); // CHECKED OK
	public static final S_SystemMessage WHALE_MAP_NOT_EMPTY			=	new S_SystemMessage(S_SystemMessage.getRefText(906), true);
}


